Text
"    I've recently noticed something interesting when looking at Python 3.3 grammar specification: The optional 'arrow' block was absent in Python 2 and I couldn't find any information regarding its meaning in Python 3. It turns out this is correct Python and it's accepted by the interpreter: I thought that this might be some kind of a precondition syntax, but: Could anyone familiar with this syntax style explain it? It's a function annotation. In more detail, Python 2.x has docstrings, which allow you to attach a metadata string to various types of object. This is amazingly handy, so Python 3 extends the feature by allowing you to attach metadata to functions describing their parameters and return values. There's no preconceived use case, but the PEP suggests several. One very handy one is to allow you to annotate parameters with their expected types; it would then be easy to write a decorator that verifies the annotations or coerces the arguments to the right type. Another is to allow parameter-specific documentation instead of encoding it into the docstring. These are function annotations covered in PEP 3107. Specifically, the -> marks the return function annotation. Examples: Annotations are dictionaries, so you can do this: You can also have a python data structure rather than just a string: Or, you can use function attributes to validate called values: Prints In the following code: the -> int just tells that f() returns an integer (but it doesn't force the function to return an integer). It is called a return annotation, and can be accessed as f.__annotations__['return']. Python also supports parameter annotations: : float tells people who read the program (and some third-party libraries/programs, e. g. pylint) that x should be a float. It is accessed as f.__annotations__['x'], and doesn't have any meaning by itself. See the documentation for more information: https://docs.python.org/3/reference/compound_stmts.html#function-definitions https://www.python.org/dev/peps/pep-3107/ As other answers have stated, the -> symbol is used as part of function annotations. In more recent versions of Python >= 3.5, though, it has a defined meaning. PEP 3107 -- Function Annotations described the specification, defining the grammar changes, the existence of func.__annotations__ in which they are stored and, the fact that it's use case is still open. In Python 3.5 though, PEP 484 -- Type Hints attaches a single meaning to this: -> is used to indicate the type that the function returns. It also seems like this will be enforced in future versions as described in What about existing uses of annotations: The fastest conceivable scheme would introduce silent deprecation of non-type-hint annotations in 3.6, full deprecation in 3.7, and declare type hints as the only allowed use of annotations in Python 3.8. (Emphasis mine) This hasn't been actually implemented as of 3.6 as far as I can tell so it might get bumped to future versions. According to this, the example you've supplied: will be forbidden in the future (and in current versions will be confusing), it would need to be changed to: for it to effectively describe that function f returns an object of type int. The annotations are not used in any way by Python itself, it pretty much populates and ignores them. It's up to 3rd party libraries to work with them. This means the type of result the function returns, but it can be None. It is widespread in modern libraries oriented on Python 3.x. For example, it there is in code of library pandas-profiling in many places for example: My summary: Simply -> is introduced to get developers to optionally specify the return type of the function. See Python Enhancement Proposal 3107 This is an indication of how things may develop in future as Python is adopted extensively - an indication towards strong typing - this is my personal observation. You can specify types for arguments as well. Specifying return type of the functions and arguments will help in reducing logical errors and improving code enhancements. You can have expressions as return type (for both at function and parameter level) and the result of the expressions can be accessed via annotations object's 'return' attribute. annotations will be empty for the expression/return value for lambda inline functions. def function(arg)->123: It's simply a return type, integer in this case doesn't matter which number you write. like Java : But for Python (how Jim Fasarakis Hilliard said) the return type it's just an hint, so it's suggest the return but allow anyway to return other type like a string.. Will give the result : 49. Or in other words '-> str' has NO effect on return type: -> is introduced in python3. In simpler words, the content after the -> denotes the return type of the function. The return type is optional. It's just telling the user what it expects or return the value funcname.__annotations__ will print the details like The Output even when you return the values it display nothing. Please refer to the PEP3107 specification. These are function annotations. Python 2.x has docstrings. Similarly, Python 3 introduced the use of -> as function annotations. Python uses these while generating documentation.    Required, but never shown By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy  Site design / logo © 2023 Stack Exchange Inc; user contributions licensed under CC BY-SA. rev 2023.1.23.43186 Your privacy By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy."
